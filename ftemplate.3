.\" Automatically generated by Pandoc 2.1.1
.\"
.TH "ftemplate" "3" "" "" ""
.hy
.SH NAME
.PP
ftemplate
.SH SYNOPSIS
.nf
\f[C]
#include\ <ftemplate.h>
bool
ftemplate(FILE\ \ \ \ \ \ *_o,
\ \ \ \ \ \ \ \ \ \ FILE\ \ \ \ \ \ *_i,
\ \ \ \ \ \ \ \ \ \ const\ char\ _start[],
\ \ \ \ \ \ \ \ \ \ const\ char\ _end[],
\ \ \ \ \ \ \ \ \ \ size_t\ \ \ \ \ _keysz,
\ \ \ \ \ \ \ \ \ \ char\ \ \ \ \ \ \ _key[_keysz]);
\f[]
.fi
.SH DESCRIPTION
.PP
The simplest implementation of a templating mechanism in C.
The \f[I]ftemplate\f[] function reads from *_i* and if not null writes
to *_o\f[I]. When it finds a tag enclossured between \f[]_start\f[I] and
\f[]_end* then it returns \f[I]true\f[] with the tag in *_key*.
.PP
After receiving an EOF from *_i* or failing to write to *_o* it returns
false.
You can use this function in a while loop.
If there's no space in b to store a tag returns false.
.IP
.nf
\f[C]
while\ (ftemplate(stdout,\ stdin,\ "{{",\ "}}",\ sizeof(b),\ b))\ {
\ \ \ \ if\ (!strcmp(b,\ "key1"))\ {
\ \ \ \ \ \ \ \ fputs("val1",\ stdout);
\ \ \ \ }\ else\ {
\ \ \ \ \ \ \ \ /*\ Unknown\ key.\ */
\ \ \ \ }
}
\f[]
.fi
.SH COLLABORATING
.PP
You can collaborate with this project either by making bug reports,
making pull requests or making a donation.
.IP \[bu] 2
Bug reports, pull requests: Harkaitz Agirre <harkaitz.aguirre@gmail.com>
.IP \[bu] 2
\f[I]Bitcoin\f[] : \f[I]1C1ZzDje7vHhF23mxqfcACE8QD4nqxywiV\f[]
.IP \[bu] 2
\f[I]Binance\f[] : \f[I]bnb194ay2cy83jjp644hdz8vjgjxrj5nmmfkngfnul\f[]
.IP \[bu] 2
\f[I]Monero\f[] :
\f[I]88JP1c94kDEbyddN4NGU574vwXHB6r3FqcFX9twmxBkGNSnf64c5wjE89YaRVUk7vBbdnecWSXJmRhFWUcLcXUTFJVddZti\f[]
.SH SEE ALSO
.PP
\f[B]OPEN_MEMSTREAM(3)\f[], \f[B]FMEMOPEN(3)\f[]
